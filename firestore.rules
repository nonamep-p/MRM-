/**
 * @fileoverview Firestore Security Rules for VoyageVista Travel Agency.
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access for general content (travel packages, site settings, hero slides)
 * while strictly controlling access to sensitive data like contact form submissions.
 * Authorization decisions are made without `get()` calls, ensuring efficient and scalable security checks.
 *
 * Data Structure:
 * - /travelPackages/{travelPackageId}: Publicly readable travel package data.
 * - /packageAvailability/{availabilityId}: Publicly readable travel package availability data.
 * - /contactFormSubmissions/{contactFormSubmissionId}: Contact form submissions, accessible only to authenticated administrators.
 * - /siteSettings/main: Global site settings, publicly readable.
 * - /heroSlides/{heroSlideId}: Publicly readable hero slide data.
 *
 * Key Security Decisions:
 * - Travel Packages and Hero Slides are publicly readable, allowing anyone to view travel offers and site content.
 * - Contact Form Submissions are secured to prevent unauthorized access to sensitive user data.
 * - Site Settings are publicly readable, but write access is restricted.
 * - No user-specific private data is stored, simplifying the authorization model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read travel package information, but restricts writes.
     * @path /travelPackages/{travelPackageId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access to travel package data.
     */
    match /travelPackages/{travelPackageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
    * @description Allows anyone to read travel package availability information, but restricts writes.
    * @path /packageAvailability/{availabilityId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Allows public read access to package availability data.
    */
    match /packageAvailability/{availabilityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Only allows authenticated users to read, create, update, and delete contact form submissions.
     * @path /contactFormSubmissions/{contactFormSubmissionId}
     * @allow (get, list, create, update, delete): if isSignedIn()
     * @deny (get, list, create, update, delete): if !isSignedIn()
     * @principle Restricts access to contact form submissions to authenticated users.
     */
    match /contactFormSubmissions/{contactFormSubmissionId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

   /**
    * @description Allows anyone to read the main site settings, but restricts writes to authenticated users.
    * @path /siteSettings/main
    * @allow (get): if true
    * @allow (update, create, delete): if isSignedIn()
    * @deny (get): if false
    * @deny (update, create, delete): if !isSignedIn()
    * @principle Allows public read access to site settings, but restricts write access to authenticated users.
    */
    match /siteSettings/main {
      allow get: if true;
      allow update, create, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read hero slide information, but restricts writes.
     * @path /heroSlides/{heroSlideId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Allows public read access to hero slide data.
     */
    match /heroSlides/{heroSlideId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}

/**
 * @description Checks if the request is made by an authenticated user.
 * @return {bool} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}